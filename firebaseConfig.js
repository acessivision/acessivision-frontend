// Import do Firebase Admin e FileSystem
import admin from "firebase-admin";
import { readFileSync } from "fs";
import { FieldValue } from "firebase-admin/firestore"; // Importe FieldValue

// Importa credenciais da service account (mantenha seu caminho)
const serviceAccount = JSON.parse(
  readFileSync("./acessivision-firebase-adminsdk.json", "utf8")
);

// Inicializar Firebase Admin
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

export const db = admin.firestore();

console.log('üî• CRIANDO ESTRUTURA CORRETA DO ACESSIVISION (COM SUBCOLE√á√ïES)');
console.log('==========================================================\n');

// Fun√ß√£o para gerar IDs √∫nicos (OK)
function gerarId() {
  return db.collection('temp').doc().id;
}

// Fun√ß√£o para obter timestamp atual (OK)
function agora() {
  return admin.firestore.Timestamp.now();
}

// Fun√ß√£o principal para criar a estrutura
async function criarEstrutura() {
  try {
    console.log('üìù Criando dados de exemplo...\n');

    // ==========================================
    // 1. CRIAR USU√ÅRIOS
    // ==========================================
    console.log('üë§ Criando usu√°rios...');
    const usuario1Id = gerarId(); // Guardar ID para refer√™ncia
    const usuario2Id = gerarId(); // Guardar ID para refer√™ncia

    // Usu√°rio 1 (sem 'historico' inicial)
    await db.collection('usuarios').doc(usuario1Id).set({
      nome: 'Jo√£o Silva',
      email: 'joao@email.com',
      // Adicione outros campos se necess√°rio (como data de cria√ß√£o)
      historico: [] // Come√ßa com array vazio
    });

    // Usu√°rio 2 (sem 'historico' inicial)
    await db.collection('usuarios').doc(usuario2Id).set({
      nome: 'Maria Santos',
      email: 'maria@email.com',
      historico: [] // Come√ßa com array vazio
    });
    console.log(`‚úÖ Usu√°rios criados: ${usuario1Id}, ${usuario2Id}`);

    // ==========================================
    // 2. CRIAR CONVERSAS
    // ==========================================
    console.log('üí¨ Criando conversas...');
    const conversa1Id = gerarId(); // Guardar ID
    const conversa2Id = gerarId(); // Guardar ID
    const conversa3Id = gerarId(); // Mais uma para o Jo√£o

    const dataAtual = agora(); // Usar o mesmo timestamp para cria√ß√£o/altera√ß√£o inicial

    // Conversa 1 (do Jo√£o)
    await db.collection('conversas').doc(conversa1Id).set({
      titulo: 'Compras no mercado',
      ownerUid: usuario1Id, // Link para o usu√°rio dono
      dataCriacao: dataAtual,
      dataAlteracao: dataAtual // Inicialmente igual √† cria√ß√£o
    });

    // Conversa 2 (da Maria)
    await db.collection('conversas').doc(conversa2Id).set({
      titulo: 'Foto do cachorro',
      ownerUid: usuario2Id,
      dataCriacao: dataAtual,
      dataAlteracao: dataAtual
    });

    // Conversa 3 (do Jo√£o)
    await db.collection('conversas').doc(conversa3Id).set({
        titulo: 'Nota fiscal restaurante',
        ownerUid: usuario1Id,
        dataCriacao: dataAtual,
        dataAlteracao: dataAtual
      });

    console.log(`‚úÖ Conversas criadas: ${conversa1Id}, ${conversa2Id}, ${conversa3Id}`);

    // ========================================================
    // 3. CRIAR MENSAGENS (DENTRO DAS SUBCOLE√á√ïES)
    // ========================================================
    console.log('üíå Criando mensagens nas subcole√ß√µes...');

    // Mensagens para Conversa 1 (Jo√£o)
    const mensagensConv1Ref = db.collection('conversas').doc(conversa1Id).collection('mensagens');
    await mensagensConv1Ref.add({
      sender: 'user',
      text: 'O que est√° escrito nesta lista de compras?',
      // Simule uma URL do Storage (substitua <SEU_BUCKET> pelo nome real do seu bucket)
      imageUri: 'https://firebasestorage.googleapis.com/v0/b/<SEU_BUCKET>.appspot.com/o/placeholder%2Flista_compras.jpg?alt=media',
      timestamp: agora()
    });
    await mensagensConv1Ref.add({
      sender: 'api', // Use 'api' ou 'bot' consistentemente
      text: 'A lista cont√©m: Leite, P√£o, Ovos e Manteiga.',
      imageUri: null,
      timestamp: agora()
    });

    // Mensagens para Conversa 2 (Maria)
    const mensagensConv2Ref = db.collection('conversas').doc(conversa2Id).collection('mensagens');
    await mensagensConv2Ref.add({
      sender: 'user',
      text: 'Que ra√ßa √© esse cachorro?',
      imageUri: 'https://firebasestorage.googleapis.com/v0/b/<SEU_BUCKET>.appspot.com/o/placeholder%2Fcachorro.jpg?alt=media',
      timestamp: agora()
    });
    await mensagensConv2Ref.add({
      sender: 'api',
      text: 'Parece ser um Golden Retriever filhote.',
      imageUri: null,
      timestamp: agora()
    });
     await mensagensConv2Ref.add({ // Mais uma mensagem na conversa 2
      sender: 'user',
      text: 'Ele √© fofo!',
      imageUri: null, // Mensagem s√≥ de texto
      timestamp: agora()
    });


    // Mensagens para Conversa 3 (Jo√£o) - Apenas Texto
     const mensagensConv3Ref = db.collection('conversas').doc(conversa3Id).collection('mensagens');
     await mensagensConv3Ref.add({
       sender: 'user',
       text: 'Qual o valor total da nota?',
       imageUri: 'https://firebasestorage.googleapis.com/v0/b/<SEU_BUCKET>.appspot.com/o/placeholder%2Fnota_fiscal.jpg?alt=media',
       timestamp: agora()
     });
     await mensagensConv3Ref.add({
       sender: 'api',
       text: 'O valor total √© R$ 55,80.',
       imageUri: null,
       timestamp: agora()
     });


    console.log('‚úÖ Mensagens criadas nas subcole√ß√µes');

    // ========================================================
    // 4. ATUALIZAR 'historico' NOS USU√ÅRIOS
    // ========================================================
    console.log("üîó Atualizando 'historico' dos usu√°rios...");
    
    // Adiciona conversas ao hist√≥rico do Jo√£o
    await db.collection('usuarios').doc(usuario1Id).update({
        historico: FieldValue.arrayUnion(conversa1Id, conversa3Id)
    });

    // Adiciona conversa ao hist√≥rico da Maria
    await db.collection('usuarios').doc(usuario2Id).update({
        historico: FieldValue.arrayUnion(conversa2Id)
    });
    console.log("‚úÖ 'historico' dos usu√°rios atualizado.");


    // ==========================================
    // 5. REMOVER COLE√á√ïES ANTIGAS (N√ÉO MAIS USADAS)
    // ==========================================
    // FOTOS, AUDIOS, MENSAGENS (raiz), HISTORICO (raiz) n√£o s√£o mais criadas.

    // ==========================================
    // 6. VERIFICAR CRIA√á√ÉO
    // ==========================================
    console.log('\nüîç Verificando estrutura criada...');
    const colecoesPrincipais = ['usuarios', 'conversas'];
    for (const colecao of colecoesPrincipais) {
      const snapshot = await db.collection(colecao).get();
      console.log(`   üìÇ ${colecao}: ${snapshot.size} documentos`);
    }

    // Verificar subcole√ß√µes (exemplo para a primeira conversa)
    const msgsConv1Snapshot = await db.collection('conversas').doc(conversa1Id).collection('mensagens').get();
    console.log(`      Subcole√ß√£o 'mensagens' em ${conversa1Id}: ${msgsConv1Snapshot.size} documentos`);


    console.log('\n‚úÖ ESTRUTURA CORRETA CRIADA COM SUCESSO!');

    // ==========================================
    // 7. MOSTRAR RELACIONAMENTOS
    // ==========================================
    console.log('\nüîó RELACIONAMENTOS CRIADOS:');
    console.log(`   üë§ Usu√°rio ${usuario1Id} possui conversas no array 'historico'`);
    console.log(`   üë§ Usu√°rio ${usuario2Id} possui conversas no array 'historico'`);
    console.log(`   üí¨ Conversa ${conversa1Id} (owner: ${usuario1Id})`);
    console.log(`      -> üíå Subcole√ß√£o 'mensagens' com ${msgsConv1Snapshot.size} mensagens`);
    console.log(`   üí¨ Conversa ${conversa2Id} (owner: ${usuario2Id}) -> Subcole√ß√£o 'mensagens'`);
    console.log(`   üí¨ Conversa ${conversa3Id} (owner: ${usuario1Id}) -> Subcole√ß√£o 'mensagens'`);

  } catch (error) {
    console.error('‚ùå Erro ao criar estrutura:', error);
  }
}

// Fun√ß√£o para listar tudo (MODIFICADA para incluir subcole√ß√µes)
async function listarTudo() {
  console.log('\nüìã LISTANDO TODOS OS DADOS CRIADOS:');
  console.log('='.repeat(50));

  const colecoesPrincipais = ['usuarios', 'conversas'];

  for (const nomeColecao of colecoesPrincipais) {
    console.log(`\nüìÇ COLE√á√ÉO: ${nomeColecao.toUpperCase()}`);
    console.log('-'.repeat(30));

    const snapshot = await db.collection(nomeColecao).get();

    for (const doc of snapshot.docs) { // Use 'for...of' para async/await
      console.log(`\n   üìÑ Documento: ${doc.id}`);
      console.log(`   üìù Dados:`, JSON.stringify(doc.data(), null, 2)); // Ajustei indenta√ß√£o

      // Se for uma conversa, lista as mensagens da subcole√ß√£o
      if (nomeColecao === 'conversas') {
        console.log(`      üíå Subcole√ß√£o: mensagens`);
        const mensagensSnapshot = await db.collection(nomeColecao).doc(doc.id).collection('mensagens').orderBy('timestamp').get();
        if (mensagensSnapshot.empty) {
            console.log(`         (vazia)`);
        } else {
            mensagensSnapshot.forEach((msgDoc, index) => {
                console.log(`         üìÑ Mensagem ${index + 1}: ${msgDoc.id}`);
                console.log(`         üìù Dados:`, JSON.stringify(msgDoc.data(), null, 4)); // Mais indenta√ß√£o
            });
        }
      }
    }
  }
}

// Executar cria√ß√£o e listagem
async function executar() {
  await criarEstrutura();
  await listarTudo();

  console.log('\nüéâ PROCESSO COMPLETO FINALIZADO!');
  console.log('Estrutura correta do AcessiVision criada/verificada no Firebase.');
}

executar().catch(console.error);

/*
ESTRUTURA IMPLEMENTADA:
- üë§ usuarios/{userId}
  - historico: [conversaId1, conversaId2, ...] (Array de Strings)
- üí¨ conversas/{conversaId}
  - ownerUid: string (userId do dono)
  - titulo: string
  - dataCriacao: timestamp
  - dataAlteracao: timestamp
  - üíå mensagens/{messageId} (Subcole√ß√£o)
    - sender: 'user' | 'api' (ou 'bot')
    - text: string | null
    - imageUri: string (URL do Storage) | null
    - timestamp: timestamp
*/